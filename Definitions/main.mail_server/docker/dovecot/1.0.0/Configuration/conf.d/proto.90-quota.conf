
plugin {

  quota_rule = *:storage={{SERVICE.MAIL_RECEIVE.MAILBOXES_CAPACITY}}
  quota_rule1 = INBOX/Trash:storage=1G
  quota_rule2 = INBOX/Archive:storage=+20%%
  quota_rule3 = INBOX/Sent:ignore
  quota_rule4 = INBOX:messages=+100K
  quota_max_mail_size = 100M
  quota_warning = storage=95%% quota-warning 95 %u
  quota_warning2 = storage=80%% quota-warning 80 %u
  quota_warning3 = storage=50%% quota-warning 50 %u
  quota_exceeded_message = Quota exceeded for mailbox is exceeded.
}

service quota-warning {

    executable = script /usr/local/bin/quota-warning.sh
    user = vmail
    unix_listener quota-warning {
        user = vmail
    }
}

# Multiple backends are supported:
#   dirsize: Find and sum all the files found from mail directory.
#            Extremely SLOW with Maildir. It'll eat your CPU and disk I/O.
#   dict: Keep quota stored in dictionary (eg. SQL)
#   maildir: Maildir++ quota
#   fs: Read-only support for filesystem quota

plugin {
  #quota = dirsize:User quota
  #quota = maildir:User quota
  #quota = dict:User quota::proxy::quota
  #quota = fs:User quota
}

# Multiple quota roots are also possible, for example this gives each user
# their own 100MB quota and one shared 1GB quota within the domain:
plugin {
  #quota = dict:user::proxy::quota
  #quota2 = dict:domain:%d:proxy::quota_domain
  #quota_rule = *:storage=102400
  #quota2_rule = *:storage=1048576
}
